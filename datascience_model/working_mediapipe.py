# -*- coding: utf-8 -*-
"""Working_MediaPipe.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oHd8C-74yy-LHhMnVc-V3J2J4vRglK6y
"""

!pip install mediapipe

from google.colab import drive
drive.mount('/content/drive')

images_in_folder = '/content/drive/MyDrive/Cricket shot model/data_training/new Cd'

# /content/drive/MyDrive/Cricket shot model/data_training/Cut Shot
# /content/drive/MyDrive/Cricket shot model/data_training/Leg
# /content/drive/MyDrive/Cricket shot model/data_training/Pull Shot
# /content/drive/MyDrive/Cricket shot model/data_training/Straight Shot
# /content/drive/MyDrive/Cricket shot model/data_training/Sweep Shot
# /content/drive/MyDrive/Cricket shot model/data_training/new Cd
# /content/drive/MyDrive/Cricket shot model/data_training/Cover Drive

csv_out_path = 'cover.csv'

import os
shots = os.listdir(images_in_folder)
print(shots)
print(len(shots))

import csv
import cv2
import numpy as np
import os
import sys
import tqdm
import pandas as pd
import mediapipe as mp
mp_pose = mp.solutions.pose
from csv import writer

#Prepare DrawingSpec for drawing the face landmarks later.
mp_drawing = mp.solutions.drawing_utils 
drawing_spec = mp_drawing.DrawingSpec(thickness=2, circle_radius=1)
from google.colab.patches import cv2_imshow



with open(csv_out_path, 'w') as csv_out_file:
  csv_out_writer = csv.writer(csv_out_file, delimiter=',', quoting=csv.QUOTE_MINIMAL)
  
  image_names = sorted([
        n for n in os.listdir(images_in_folder)
        if not n.startswith('.')])
  for image_name in tqdm.tqdm(image_names, position=0):
      print('Training ', image_name, file=sys.stderr)
      # Load image.
      input_frame = cv2.imread(os.path.join(images_in_folder, image_name))
      input_frame = cv2.cvtColor(input_frame, cv2.COLOR_BGR2RGB)
   

      # Initialize fresh pose tracker and run it.
      with mp_pose.Pose(static_image_mode=True, min_detection_confidence=0.5, model_complexity=2) as pose_tracker:
        results = pose_tracker.process(image=input_frame)
        pose_landmarks = results.pose_landmarks
        
          
      
      # Save landmarks
      if pose_landmarks is not None:
        assert len(pose_landmarks.landmark) == 33, 'Unexpected number of predicted pose landmarks: {}'.format(len(pose_landmarks.landmark))

        if os.path.join(csv_out_path):
          with open(csv_out_path, 'a+', newline='') as write_obj:
            csv_writer = writer(write_obj)
            csv_writer.writerow([
                 results.pose_landmarks.landmark[0].x, results.pose_landmarks.landmark[0].y,
                #  new
                 results.pose_landmarks.landmark[1].x, results.pose_landmarks.landmark[1].y,
                 results.pose_landmarks.landmark[2].x, results.pose_landmarks.landmark[2].y,
                 results.pose_landmarks.landmark[3].x, results.pose_landmarks.landmark[3].y,
                 results.pose_landmarks.landmark[4].x, results.pose_landmarks.landmark[5].y,
                 results.pose_landmarks.landmark[5].x, results.pose_landmarks.landmark[4].y,
                 results.pose_landmarks.landmark[6].x, results.pose_landmarks.landmark[6].y,
                 results.pose_landmarks.landmark[7].x, results.pose_landmarks.landmark[7].y,
                 results.pose_landmarks.landmark[8].x, results.pose_landmarks.landmark[8].y,
                 results.pose_landmarks.landmark[10].x, results.pose_landmarks.landmark[10].y,

                 results.pose_landmarks.landmark[11].x, results.pose_landmarks.landmark[11].y,
                 results.pose_landmarks.landmark[12].x, results.pose_landmarks.landmark[12].y,
                 results.pose_landmarks.landmark[13].x, results.pose_landmarks.landmark[13].y,
                 results.pose_landmarks.landmark[14].x, results.pose_landmarks.landmark[14].y,
                 results.pose_landmarks.landmark[16].x, results.pose_landmarks.landmark[16].y,

                 results.pose_landmarks.landmark[17].x, results.pose_landmarks.landmark[17].y,
                 results.pose_landmarks.landmark[18].x, results.pose_landmarks.landmark[18].y,
                 results.pose_landmarks.landmark[19].x, results.pose_landmarks.landmark[19].y,

                 results.pose_landmarks.landmark[20].x, results.pose_landmarks.landmark[20].y,
                 results.pose_landmarks.landmark[21].x, results.pose_landmarks.landmark[21].y,
                 results.pose_landmarks.landmark[22].x, results.pose_landmarks.landmark[22].y,

                 results.pose_landmarks.landmark[29].x, results.pose_landmarks.landmark[29].y,
                 results.pose_landmarks.landmark[30].x, results.pose_landmarks.landmark[30].y,
                 results.pose_landmarks.landmark[31].x, results.pose_landmarks.landmark[31].y,

               
                 results.pose_landmarks.landmark[23].x, results.pose_landmarks.landmark[23].y,
                 results.pose_landmarks.landmark[24].x, results.pose_landmarks.landmark[24].y,
                 results.pose_landmarks.landmark[25].x, results.pose_landmarks.landmark[25].y,
                 results.pose_landmarks.landmark[26].x, results.pose_landmarks.landmark[26].y,
                 results.pose_landmarks.landmark[27].x, results.pose_landmarks.landmark[27].y,
                 results.pose_landmarks.landmark[28].x, results.pose_landmarks.landmark[28].y

                ])
   
        # img = cv2.imread('/content/Straight') 
        # cv2.imwrite(os.path.join('/content/Straight', image_name),input_frame)    
        print(f'Pose landmarks of {image_name}:')
        annotated_image = input_frame.copy()
        mp_drawing.draw_landmarks(
        image=annotated_image,
        landmark_list=results.pose_landmarks,
        connections=mp_pose.POSE_CONNECTIONS,
        landmark_drawing_spec=drawing_spec,
        connection_drawing_spec=drawing_spec)
        cv2_imshow(annotated_image)

from google.colab import files
files.download('cover.csv')